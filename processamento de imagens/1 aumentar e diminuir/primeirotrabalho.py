# -*- coding: utf-8 -*-
"""primeirotrabalho.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P5X57MuoG64s3vDFgRujlku3FrQcB-3i
"""

import numpy as np
import cv2
import os

"""nessa linha, foram importadas as bibliotecas essenciais para o funcionamento do código."""

from google.colab import files
uploaded = files.upload()
for fn in uploaded.keys():
  print('Arquivo carregador("name") com tamanho de (length) bytes'.format(name=fn, length=len(uploaded[fn])))

"""aqui importa a imagem diretamente do google colab.

"""

filename = next(iter(uploaded))
print(filename)

"""aqui guarda a imagem e mostra o nome dela.

"""

from matplotlib import pyplot as plt
img = cv2.imread(filename)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img)

"""aqui apresenta a imagem, convertendo ela de bgr para rgb."""

x = img.shape [0]
y = img.shape [1]
z = img.shape [2]

for r in range (0,4):
  novox = x//2
  novoy = y//2
  img1 = np.zeros((novox,novoy,z), dtype=np.uint8)
  for i in range (0,novox):
    for j in range (0,novoy):
      for k in range (0,z):
        img1[i,j,k] = (img[2*i,2*j,k]*1 + img[2*i+1,2*j,k]*1 + img[2*i,2*j,k]*1 + img[2*i+1,2*j+1,k]*1)/4

  plt.imshow(img1)
  plt.figure()
  x = novox
  y = novoy
  img = img1

"""nessa parte, primeiramente ele divide o x para altura da imagem
o y para a largura
e o z para as cores (3 pois é RGB)

o for r in range é para diminuir 4 vezes a imagem

depois é criada uma imagem na escala menor.

abaixo é onde ocorre a redução de resolução.
cada 4 pixels da imagem original é reduzido a 1 pixel.
os valores são somados e dividos por 4, fazendo uma média simples.

a nova imagem é apresentada.

e as dimensões são atualizadas.
"""

for r in range (0,4):
  novox = x*2
  novoy = y*2
  img1 = np.zeros((novox,novoy,z), dtype=np.uint8)
  for i in range (x):
    for j in range (y):
      for k in range (z):
        img1[2*i,2*j,k] = img[i,j,k]
        img1[2*i+1,2*j,k] = img[i,j,k]
        img1[2*i,2*j+1,k] = img[i,j,k]
        img1[2*i+1,2*j+1,k] = img[i,j,k]

  plt.imshow(img1)
  plt.figure()
  x = novox
  y = novoy
  img = img1

"""nessa outra parte, ele faz o processo inverso, aumentando a imagem.

o for r in range vai repetir o processo 4 vezes.

depois é feita a criação de uma nova imagem de tamanho aumentado.

abaixo, cada pixel da imagem é copiado para quatro posições adjacentes.

depois exibe a imagem.

e atualiza as dimensões.
"""